version: 2.1

commands:
  print_pipeline_id:
    steps:
      - run:
          name: Print workflow ID
          # ${CIRCLE_WORKFLOW_ID:0:7} takes the first 7 chars of a Built-in environment variable
          command:
            echo ${CIRCLE_WORKFLOW_ID:0:7}
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - print_pipeline_id
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            echo "insecure" >> ~/.curlrc
            SUCCESS=$(curl --insecure  https://kvdb.io/M3opTAZS5NChuiF8Gvfbmy/migration_<< parameters.workflow_id >>)            
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm run migrations:revert             
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]      
      # Your job code here
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Run Back-end test
          command: |
            cd backend
            npm install
            npm run test            
             npm run test
            npm run test            
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Analyze Frontend
          command: |
            cd frontend
            npm install
            npm update loader-utils --depth 2
            npm update minimist --depth 4
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0      
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Analyze Backend
          command: |
            cd backend
            npm install
            npm update mkdirp --depth 2
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install tar and gzip command
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-chinhvc1
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople-chinhvc1
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
      - run:
          name: "Echo EC2 instances"
          command: |
            echo "IP address:"
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt     

      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker: 
      # Docker image here that supports Ansible      
      - image: python:3.11-rc-alpine
    steps:
      - print_pipeline_id
      # Checkout code from git
      - checkout
      - run: 
          name: Install tar,gzip and aws-cli command
          command: |
            apk add --update tar gzip aws-cli
            aws --version
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "60:00:a9:a1:7b:7b:68:69:03:97:f2:11:d9:0c:bf:51"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            echo "IP address:"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml            
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      # Test run-migration 3
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
      # Checkout code from git
      - checkout
      - run:
          name: Create environment varibales
          command: |
            echo -e "NODE_ENV=local\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}\nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
            cat backend/.env
      # Save env to backend project
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - run:
          name: Install aws-cli.
          command: |
            sudo apt install unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            echo "AWS CLI version"
            aws --version
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then                
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl https://kvdb.io/M3opTAZS5NChuiF8Gvfbmy/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi            
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      # - revert_migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          command: |
            sudo apt install -y tar gzip curl unzip
      - run:
          name: Install aws-cli.
          command: |
            sudo apt install unzip curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install -i /usr/local/aws-cli -b /usr/local/bin
            echo "AWS CLI version"
            aws --version      
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible      
      - image: python:3.11-rc-alpine
    steps:
      - print_pipeline_id
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "60:00:a9:a1:7b:7b:68:69:03:97:f2:11:d9:0c:bf:51"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk update
            apk add --update ansible
            apk add --no-cache tar npm gzip curl gcompat
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
            rm -rf /var/cache/apk/*
            echo "Verify aws cli version"
            aws --version
      - run:
          name: Build backend
          command: |
            # your code here
            cd backend
            npm install
            npm run build            
      - run:
          name: Create backend artifact
          command: |
            tar czf backend-artifact.tar.gz backend
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            pwd
            echo "Contents of the inventory.txt file is:"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt install -y tar gzip curl unzip
            which curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install node modules
          command: |
            cd backend
            npm install
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            echo " --- Cat inventory file --- "            
            export BACKEND_IP=$(cat ~/project/.circleci/ansible/inventory.txt | sed 1d)
            echo "The BACKEND IP: ${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "The API URL: ${API_URL}"
            sleep 60
            curl "${API_URL}/api/status"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi            
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
                exit 0
            else
                exit 1
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: 
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      - print_pipeline_id
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here            
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"      
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID:0:7}" ]]
            then
              # your code here
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              echo "Found stacks with: ${OldWorkflowID}"              
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "Not found stack with ${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
